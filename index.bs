<pre class="metadata">
Title: Prerendering Revamped
Shortname: prerendering-revamped
Status: DREAM
Repository: jeremyroman/alternate-loading-modes
Editor: Domenic Denicola, Google https://www.google.com/, d@domenic.me
Editor: Dominic Farolino, Google https://www.google.com/, domfarolino@gmail.com
Abstract: This document contains a collection of specification patches for well-specified prerendering.
Markup Shorthands: css no, markdown yes
Assume Explicit For: yes
Complain About: accidental-2119 yes, missing-example-ids yes
Indent: 2
Boilerplate: omit conformance
</pre>
<pre class="link-defaults">
spec:html; type:element; text:link
spec:html; type:element; text:script
</pre>
<pre class="anchors">
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/
  type: dfn
    urlPrefix: browsers.html
      text: creating a new top-level browsing context; url: creating-a-new-top-level-browsing-context
    urlPrefix: history.html
      text: session history; url: session-history
    urlPrefix: browsing-the-web.html
      for: session history entry
        text: document; url: she-document
      for: navigate
        text: mature; url: concept-navigate-mature
      for: navigation params
        text: request; url: navigation-params-request
        text: reserved environment; url: navigation-params-reserved-environment
      text: abort; for: Document; url: abort-a-document
      text: create and initialize a Document object; url: initialise-the-document-object
      text: history handling behavior; url: history-handling-behavior
      text: prompt to unload; url: prompt-to-unload-a-document
      text: refused to allow the document to be unloaded; url: refused-to-allow-the-document-to-be-unloaded
      text: traverse the history; url: traverse-the-history
    urlPrefix: urls-and-fetching.html
      text: parse a URL; url: parse-a-url
      text: resulting URL record
    urlPrefix: webappapis.html
      text: script; url: concept-script
</pre>

<h2 id="link-rel-prerender">Link type "<dfn attr-value for="link/rel"><code>prerender</code></dfn>"</h2>

<em>The following section would be added as a new sub-section of [[HTML]]'s <a href="https://html.spec.whatwg.org/multipage/links.html#linkTypes">Link types</a> section. This should replace the prerender documentation in [[RESOURCE-HINTS]]</em>

The <{link/rel/prerender}> keyword may be used with <{link}> elements. This keyword creates an <a spec=HTML>external resource link</a>. This keyword is <a spec=HTML>body-ok</a>.

The appropriate times to <a spec=HTML>fetch and process the linked resource</a> for such a link are:

<ul>
  <li>When the <a spec=HTML>external resource link</a> is created on a <{link}> element that is already [=browsing-context connected=]</a>.</li>
  <li>When the <a spec=HTML>external resource link</a>'s <{link}> element [=becomes browsing-context connected=].</li>
  <li>When the <{link/href}> attribute is changed on the <{link}> element of an [=external resource link=] that is already [=browsing-context connected=].</li>
  <li>When the <{link/referrerpolicy}> attribute's state is changed on the <{link}> element of an [=external resource link=] that is already [=browsing-context connected=].</li>
</ul>

<div algorithm="prerender-processing-model">
  The <a spec=HTML>fetch and process the linked resource</a> algorithm for <{link/rel/prerender}> links, given a <{link}> element <var>el</var>, is as follows:

  1. If |el|'s <{link/href}> attribute's value is the empty string, then return.

  1. [=Parse a URL=] given |el|'s <{link/href}> attribute, relative to |el|'s [=Node/node document=]. If that fails, then return. Otherwise, let |url| be the [=resulting URL record=].

  1. If |url|'s [=url/scheme=] is not an [=HTTP(S) scheme=], then return.

  1. Let |referrerPolicy| be  the current state of |el|'s <{link/referrerpolicy}> attribute.

  1. If |url|'s [=url/origin=] is not [=same origin=] with |el|'s [=Node/node document=]'s [=Document/origin=], then:

    1. If the [=list of sufficiently-strict speculative navigation referrer policies=] does not [=list/contain=] |referrerPolicy|, then return.

  1. [=Create a prerendering browsing context=] with |url|, |referrerPolicy|, and |el|'s [=Node/node document=].
</div>

A user agent must not <a spec=HTML>delay the load event</a> of the <{link}> element's [=Node/node document=] for this link type.

<p class="note">Note that this link type does not fire {{HTMLElement/error}} or {{HTMLElement/load}} events, unlike many other link types that create <a spec=HTML>external resource links</a>.

The <dfn>list of sufficiently-strict speculative navigation referrer policies</dfn> is a [=list=] containing the following subset of [=referrer policies=]: the empty string, "`strict-origin-when-cross-origin`", "`strict-origin`", "`same-origin`", "`no-referrer`".

<h2 id="speculation-rules">Speculation rules</h2>

<h3 id="speculation-rules-dfns">Definitions</h3>

A <dfn>speculation rule</dfn> is a [=struct=] with the following [=struct/items=]:
* <dfn for="speculation rule">URLs</dfn>, an [=ordered set=] of [=URLs=]
* <dfn for="speculation rule">requirements</dfn>, an [=ordered set=] of [=strings=]

The only valid string for [=speculation rule/requirements=] to contain is "`anonymous-client-ip-when-cross-origin`".

A <dfn>speculation rule set</dfn> is a [=struct=] with the following [=struct/items=]:
* <dfn for="speculation rule set">prefetch rules</dfn>, a [=list=] of [=speculation rules=]
* <dfn for="speculation rule set">prefetch-with-subresources rules</dfn>, a [=list=] of [=speculation rules=]

<h3 id="speculation-rules-script">The <{script}> element</h3>

<em>Note</em>: This section contains modifications to the corresponding section of [[HTML]].

To process speculation rules consistently with the existing script types, we make the following changes:

* Add "`speculationrules`" to the list of valid values for <a spec=html>the script's type</a>.

* Rename [=the script's script=] to <dfn>the script's result</dfn>, which can be either a <a spec="html">script</a> or a [=speculation rule set=].

The following algorithms are updated accordingly:

* [=Prepare a script=]: see [[#speculation-rules-prepare-a-script-patch]].
* <a spec=html>Execute a script block</a>: Add the following case to the switch on <a spec=html>the script's type</a>:
  <dl>
    <dt>"`speculationrules`"</dt>
    <dd>
      1. [=Assert=]: Never reached.
    </dd>
  </dl>

<p class="issue">We should consider whether we also want to make this execute even if scripting is disabled.</p>

<p class="issue">We should also incorporate the case where a {{HTMLScriptElement/src}} attribute is set.</p>

<p class="issue">We could fire {{HTMLElement/error}} and {{HTMLElement/load}} events if we wanted to.</p>

<h3 id="speculation-rules-prepare-a-script-patch">Prepare a script</h3>

Inside the [=prepare a script=] algorithm we make the following changes:

* Insert the following step as the second-last sub-step under "Determine the script's type as follows:":
  * If the script block's type string is an [=ASCII case-insensitive=] match for the string "`speculationrules`", <a spec=html>the script's type</a> is "`speculationrules`".

* Insert the following case in the switch on <a spec=html>the script's type</a> within the step which begins "If the element does not have a {{HTMLScriptElement/src}} content attribute..."
  <dl>
    <dt>"`speculationrules`"</dt>
    <dd>
      1. Let |result| be the result of [=parsing speculation rules=] given source text and base URL.

      1. Set [=the script's result=] to |result|.

      1. <a spec=html>The script is ready</a>.
    </dd>
  </dl>

* Insert the following case to the switch in the subsequent step beginning "Then, follow the first of the following options...." after the cases which apply only to "`classic`" and "`module`" scripts:
  <dl>
    <dt>If <a spec=html>the script's type</a> is "`speculationrules`"</dt>
    <dd>
      1. When <a spec=html>the script is ready</a>, run the following steps:

        1. If [=the script's result=] is not null, [=list/append=] it to the element's [=Node/node document=]'s [=document/list of speculation rule sets=].
    </dd>
  </dl>


<h3 id="speculation-rules-parsing">Parsing</h3>

<p class="note">
  The general principle here is to allow the existence of directives which are not understood, but not to accept into the rule set a rule which the user agent does not fully understand.
  This reduces the risk of unintended activity by user agents which are unaware of most recently added directives which might limit the scope of a rule.

<div algorithm="parse speculation rules">
  To <dfn>parse speculation rules</dfn> given a [=string=] |input| and a [=URL=] |baseURL|, perform the following steps. They return a [=speculation rule set=] or null.

  1. Let |parsed| be the result of [=parsing a JSON string to an Infra value=] given |input|.
  1. If |parsed| is not a [=map=], then return null.
  1. Let |result| be an empty [=speculation rule set=].
  1. If |parsed|["`prefetch`"] [=map/exists=] and is a [=list=], then [=list/for each=] |prefetchRule| of |parsed|["`prefetch`"]:
    1. If |prefetchRule| is not a [=map=], then [=iteration/continue=].
    1. Let |rule| be the result of [=parsing a speculation rule=] given |prefetchRule| and |baseURL|.
    1. If |rule| is null, then [=iteration/continue=].
    1. [=list/Append=] |rule| to |result|'s [=speculation rule set/prefetch rules=].
  1. If |parsed|["`prefetch_with_subresources`"] [=map/exists=] and is a [=list=], then [=list/for each=] |pwsRule| of |parsed|["`prefetch_with_subresources`"]:
    1. If |pwsRule| is not a [=map=], then [=iteration/continue=].
    1. Let |rule| be the result of [=parsing a speculation rule=] given |pwsRule| and |baseURL|.
    1. If |rule| is null, then [=iteration/continue=].
    1. [=list/Append=] |rule| to |result|'s [=speculation rule set/prefetch-with-subresources rules=].
  1. Return |result|.
</div>

<div algorithm="parse a speculation rule">
  To <dfn>parse a speculation rule</dfn> given a [=map=] |input| and a [=URL=] |baseURL|, perform the following steps. They return a [=speculation rule=] or null.

  1. If |input| has any [=map/key=] other than "`source`", "`urls`", and "`requires`", then return null.
  1. If |input|["`source`"] does not [=map/exist=] or is not the [=string=] "`list`", then return null.
  1. Let |urls| be an empty [=list=].
  1. If |input|["`urls`"] does not [=map/exist=], is not a [=list=], or has any element which is not a [=string=], then return null.
  1. [=list/For each=] |urlString| of |input|["`urls`"]:
    1. Let |parsedURL| be the result of [=basic URL parser|parsing=] |urlString| with |baseURL|.
    1. If |parsedURL| is failure, then [=iteration/continue=].
    1. If |parsedURL|'s [=url/scheme=] is not an [=HTTP(S) scheme=], then [=iteration/continue=].
    1. [=list/Append=] |parsedURL| to |urls|.
  1. Let |requirements| be an empty [=ordered set=].
  1. If |input|["`requires`"] [=map/exists=], but is not a [=list=], then return null.
  1. [=list/For each=] |requirement| of |input|["`requires`"]:
    1. If |requirement| is not the [=string=] "`anonymous-client-ip-when-cross-origin`", then return null.
    1. [=set/Append=] |requirement| to |requirements|.
  1. Return a [=speculation rule=] with [=speculation rule/URLs=] |urls| and [=speculation rule/requirements=] |requirements|.
</div>

<h3 id="speculation-rules-processing">Processing model</h3>

A [=document=] has a <dfn for=document export>list of speculation rule sets</dfn>, which is an initially empty [=list=].

<!-- TODO(domfarolino): Get rid of the `data-link-type="interface"` once we fix the dfn in HTML. -->
Periodically, for any [=document=] |document|, the user agent may [=queue a global task=] on the <a data-link-type="interface">DOM manipulation task source</a> with |document|'s [=relevant global object=] to [=consider speculation=] for |document|.

<p class="note">
  The user agent will likely do this after the insertion of new speculation rules, or when resources are idle and available.

<div algorithm="consider speculation">
  To <dfn>consider speculation</dfn> for a [=document=] |document|:

  1. If |document| is not [=Document/fully active=], then return.
     <p class="issue">It's likely that we should also handle prerendered and back-forward cached documents.
  1. For each |ruleSet| of |document|'s [=document/list of speculation rule sets=]:
    1. [=list/For each=] |rule| of |ruleSet|'s [=speculation rule set/prefetch-with-subresources rules=]:
      1. Let |requiresAnonymousClientIPWhenCrossOrigin| be true if |rule|'s [=speculation rule/requirements=] [=set/contains=] "`anonymous-client-ip-when-cross-origin`", and false otherwise.
      1. [=list/For each=] |url| of |rule|'s [=speculation rule/URLs=]:
        1. The user agent may prefetch |url| given |requiresAnonymousClientIPWhenCrossOrigin|, including subresources identified by <a href="https://github.com/whatwg/html/pull/5959">speculative HTML parsing</a>.
           <p class="issue">TODO: expand this along with prefetch more generally.
    1. [=list/For each=] |rule| of |ruleSet|'s [=speculation rule set/prefetch rules=]:
      1. Let |requiresAnonymousClientIPWhenCrossOrigin| be true if |rule|'s [=speculation rule/requirements=] [=set/contains=] "`anonymous-client-ip-when-cross-origin`", and false otherwise.
      1. [=list/For each=] |url| of |rule|'s [=speculation rule/URLs=]:
        1. The user agent may prefetch |url| given |requiresAnonymousClientIPWhenCrossOrigin|.
           <p class="issue">TODO: expand this to actually elaborate on how prefetch works, once initiated, and to incorporate the |requiresAnonymousClientIPWhenCrossOrigin| flag. We may wish to include language about when the UA should deduplicate requests.
</div>

<p class="issue">
  We should also notice removals and consider cancelling speculated actions.

<h2 id="prerendering-bcs">Prerendering browsing contexts</h2>

<em>The following section would be added as a new sub-section of [[HTML]]'s <a href="https://html.spec.whatwg.org/multipage/browsers.html#windows">Browsing contexts</a> section.</em>

Every [=browsing context=] has a <dfn for="browsing context">loading mode</dfn>, which is one of the following:

: "`default`"
:: No special considerations are applied to content loaded in this browsing context
: "`prerender`"
:: This browsing context is displaying prerendered content
: "`uncredentialed-prerender`"
:: This browsing context is displaying prerendered content, and furthermore that content cannot make credentialed fetches

By default, a [=browsing context=]'s [=browsing context/loading mode=] is "`default`". A browsing context whose [=browsing context/loading mode=] is either "`prerender`" or "`uncredentialed-prerender`" is known as a <dfn>prerendering browsing context</dfn>.

<p class="note">This specification enforces that [=prerendering browsing contexts=] are always [=top-level browsing contexts=], i.e., that a [=nested browsing context=]'s [=browsing context/loading mode=] is always "`default`".

<p class="issue">Probably we will need more loading modes for handling [=nested browsing contexts=] inside of top-level prerendered ones. Definitely a to-do.</p>

A [=prerendering browsing context=] is <dfn for="prerendering browsing context">empty</dfn> if the only entry in its [=session history=] is the initial `about:blank` {{Document}}.

Every {{Document}} has a <dfn for="Document">prerendering browsing contexts map</dfn>, which is an [=ordered map=] of ([=URL=], [=referrer policy=]) [=tuples=] to [=prerendering browsing contexts=]. This is used to fulfill [=navigate|navigations=] to a given URL by instead [=prerendering browsing context/activating=] the corresponding prerendering browsing context.

Every {{Document}} has a <dfn for="Document">post-prerendering activation steps list</dfn>, which is a [=list=] where each [=list/item=] is a series of algorithm steps.

<div algorithm="create a prerendering browsing context">
  To <dfn export>create a prerendering browsing context</dfn> given a [=URL=] |startingURL|, a [=referrer policy=] |referrerPolicy|, and a {{Document}} |referrerDoc|:

  1. [=Assert=]: |startingURL|'s [=url/scheme=] is an [=HTTP(S) scheme=].

  1. If |referrerDoc|'s [=Document/prerendering browsing contexts map=][(|startingURL|, |referrerPolicy|)] [=map/exists=], then return.

  1. Let |bc| be the result of [=creating a new top-level browsing context=].

  1. Set |bc|'s [=browsing context/loading mode=] to "`prerender`".

  1. If |startingURL|'s [=url/origin=] is not [=same origin=] with |referrerDoc|'s [=Document/origin=], run these steps:

    1. Set |bc|'s [=browsing context/loading mode=] to "`uncredentialed-prerender`".

    1. [=Assert=]: The [=list of sufficiently-strict speculative navigation referrer policies=] [=list/contains=] |referrerPolicy|.

  1. Set |referrerDoc|'s [=Document/prerendering browsing contexts map=][|startingURL|] to |bc|.

  1. Let |request| be a new [=request=] whose [=request/URL=] is |startingURL| and [=request/referrer policy=] is |referrerPolicy|.

  1. [=Navigate=] |bc| to |request| with the [=source browsing context=] set to |referrerDoc|'s [=Document/browsing context=].
</div>

<div algorithm>
  To <dfn for="prerendering browsing context">activate</dfn> a [=prerendering browsing context=] |successorBC| in place of a [=top-level browsing context=] |predecessorBC| given a [=history handling behavior=] |historyHandling|:

  1. Assert: |historyHandling| is either "`default`" or "`replace`".

  1. Assert: |successorBC| is not [=prerendering browsing context/empty=].

  1. Assert: |predecessorBC| is a [=top-level browsing context=].

  <!-- The following are copied from the navigate algorithm, and probably could benefit from some refactoring to deduplicate. -->

  1. Cancel any preexisting but not yet [=navigate/mature=] attempts to navigate |predecessorBC|, including canceling any instances of the [=fetch=] algorithm started by those attempts. If one of those attempts has already <a lt="create and initialize a Document object">created and initialized a new `Document` object</a>, [=Document/abort=] that {{Document}} also.

  1. [=Prompt to unload=] the [=active document=] of |predecessorBC|. If the user [=refused to allow the document to be unloaded=], then return.

  1. [=Document/Abort=] the [=active document=] of |predecessorBC|.

  <!-- End copied section. -->

  1. TODO prepend the existing session history of |predecessorBC| into |successorBC|? Or, probably better, use the new "browsing session" concept to bridge them? Be sure to respect |historyHandling|.

  1. [=In parallel=]:

    1. Update the user agent's user interface to replace |predecessorBC| with |successorBC|, e.g., by updating the tab/window contents and the browser chrome.

    <!-- TODO is this the right task source? Should we make a new one? -->
    1. [=Queue a global task=] on the [=networking task source=] given |successorBC|'s [=browsing context/active window=] to perform the following steps

      1. Set |successorBC|'s [=browsing context/loading mode=] to "`default`".

      1. [=Fire an event=] named {{Document/prerenderingchange}} at |successorBC|'s [=active document=].

      1. [=list/For each=] |steps| in |successorBC|'s [=active document=]'s [=Document/post-prerendering activation steps list=]:

        1. Run |steps|.

        1. Assert: running |steps| did not throw an exception.

      1. [=list/Empty=] |successorBC|'s [=active document=]'s [=Document/post-prerendering activation steps list=].
</div>

<hr>

Amend the {{Document}} interface:

<pre class="idl">
  partial interface Document {
      readonly attribute boolean prerendering;
      attribute EventHandler onprerenderingchange;
  };
</pre>

The <dfn attribute for="Document">prerendering</dfn> getter steps are to return true if [=this=] has a non-null [=Document/browsing context=] that is a [=prerendering browsing context=]; otherwise, false.

<p class="note">This attribute lets pages know when they're being presented in a non-interactive "prerendering-like" context. In the future, this would include a visible document in a `<portal>` element, both when loaded into it or via predecessor adoption.

The <dfn attribute for="Document">onprerenderingchange</dfn> attribute is an [=event handler IDL attribute=] corresponding to the <dfn event for="Document">prerenderingchange</dfn> [=event handler event type=].


<h2 id="navigation">Navigation and session history</h2>

<h3 id="navigate-activation">Allowing activation in place of navigation</h3>

Patch the [=navigate=] algorithm to allow the [=prerendering browsing context/activate|activation=] of a [=prerendering browsing context=] in place of a normal navigation as follows:

<div algorithm="navigate activate patch">
  In [=navigate=], append the following steps after the fragment navigation handling (currently step 6):

  1. If all of the following are true:

      * |browsingContext| is a [=top-level browsing context=]
      * |historyHandling| is "`default`" or "`replace`"
      * <var ignore>navigationType</var> is "`other`"
      * |resource| is a [=request=] whose [=request/method=] is \``GET`\`
      * |browsingContext|'s [=active document=]'s [=Document/prerendering browsing contexts map=][(|resource|'s [=request/URL=], |resource|'s [=request/referrer policy=])] [=map/exists=]

    then:

    1. Let |successorBC| be |browsingContext|'s [=active document=]'s [=Document/prerendering browsing contexts map=][(|resource|'s [=request/URL=], |resource|'s [=request/referrer policy=])].

    1. If |successorBC| is not [=prerendering browsing context/empty=], then:

      1. [=prerendering browsing context/Activate=] |successorBC| in place of |browsingContext| given |historyHandling|.

      1. Return.
</div>

<h3 id="always-replacement">Maintaining a trivial session history</h3>

<div algorithm="navigate historyHandling patch">
  Patch the [=navigate=] algorithm to ensure the [=session history=] of a [=prerendering browsing context=] stays trivial by prepending the following step before all others:

  1. If <var ignore>browsingContext</var> is a [=prerendering browsing context=], then:

    1. Assert: |historyHandling| is not "`entry update`", since prerendering browsing contexts have trivial session histories and thus will never end up [=traverse the history|traversing=] back to an entry with null [=session history entry/document=].

    1. If |historyHandling| is "`default`", then set |historyHandling| to "`replace`".
</div>

<div algorithm="URL and history update steps patch">
  Patch the <a spec=HTML>URL and history update steps</a> by adding the following step after step 1:

  1. If <var ignore>browsingContext</var> is a [=prerendering browsing context=], then set <var ignore>isPush</var> to false.
</div>

<h3 id="no-bad-navs">Preventing non-HTTP(S) navigations</h3>

Patch the [=navigate=] algorithm to prevent certain navigations in a [=prerendering browsing context=] as follows:

<p class="issue">Portals might need an extra hook to close the portal in these cases. Or should we reconsider and just do nothing for portals too? That might be more elegant. I think it just requires portals to not be so zealous about clearing the host element/browsing context link, which isn't observable anyway?

<div algorithm="process a navigate response patch">
  In <a spec=HTML>process a navigate response</a>, append the following after the step which establishes the value of |failure|, but before the step which uses it to display an error page:

  1. If <var ignore>browsingContext</var> is a [=prerendering browsing context=], and any of the following hold:

      * |failure| is true;
      * |navigationParams|'s [=navigation params/request=] is null;
      * |navigationParams|'s [=navigation params/request=]'s [=request/current URL=]'s [=url/scheme=] is not a [=HTTP(S) scheme=];
      * |response| has a \``Content-Disposition`\` header specifying the `attachment`
          disposition type; or
      * |response|'s [=response/status=] is 204 or 205,

    then:

    1. Run the [=environment discarding steps=] for |navigationParams|'s [=navigation params/reserved environment=].

    1. Return.
</div>

<div algorithm="process a navigate URL scheme patch">
  In <a spec=HTML>process a navigate URL scheme</a>, insert the following step before the step
  which displays inline content:

  1. Otherwise, if <var ignore>browsingContext</var> is a [=prerendering browsing context=], then return.
</div>

<h3 id="cleanup-upon-discarding">Cleanup upon discarding a {{Document}}</h3>

Modify the [=discard a document|discard=] algorithm for {{Document}}s by appending the following step:

<div algorithm="discard a Document patch">
  1. [=list/Empty=] <var ignore>document</var>'s [=Document/post-prerendering activation steps list=].
</div>

<h2 id="nonsense-behaviors">Preventing nonsensical behaviors</h2>

Some behaviors might make sense in most [=top-level browsing contexts=], but do not make sense in [=prerendering browsing contexts=]. This section enumerates specification patches to enforce such restrictions.

<h3 id="patch-window-apis">APIs for creating and navigating browsing contexts by name</h3>

Modify the definition of <a spec=HTML>script-closable</a> to prevent window closing while in a [=prerendering browsing context=]:

A [=browsing context=] is <dfn noexport>script-closable</dfn> if either of the following is true:

* it is an [=auxiliary browsing context=] that was created by script (as opposed to by an action of the user); or
* it is a [=top-level browsing context=] <ins>that is not a [=prerendering browsing context=]</ins> and whose [=session history=] contains only one {{Document}}.

<h2 id="intrusive-behaviors">Preventing intrusive behaviors</h2>

Various behaviors are disallowed in [=prerendering browsing contexts=] because they would be intrusive to the user, since the prerendered content is not being actively interacted with.

<h3 id="patch-downloading">Downloading resources</h3>

Modify the <a spec=HTML>downloads a hyperlink</a> algorithm to ensure that downloads inside [=prerendering browsing contexts=] are delayed until [=prerendering browsing context/activate|activation=], by inserting the following before the step which goes [=in parallel=]:

<div algorithm="downloads a hyperlink patch">
  1. If <var ignore>subject</var>'s [=Node/node document=]'s [=Document/browsing context=] is a [=prerendering browsing context=], then append the following step to <var ignore>subject</var>'s [=Node/node document=]'s [=Document/post-prerendering activation steps list=] and return.
</div>

<h3 id="patch-modals">User prompts</h3>

<div algorithm="cannot show simple dialogs patch">
  Modify the <a spec=HTML>cannot show simple dialogs</a> algorithm, given a {{Window}} |window|, by prepending the following step:

  1. If |window|'s [=Window/browsing context=] is a [=prerendering browsing context=], then return true.
</div>

<div algorithm="window print() patch">
  Modify the {{Window/print()}} method steps by prepending the following step:

  1. If [=this=]'s [=Window/browsing context=] is a [=prerendering browsing context=], then return.
</div>

<h2 id="todo">TODO</h2>

- Spec all the actual restrictions (storage, intrusive APIs, uncredentialed fetching)
- Ensure navigations get aborted, and the map emptied, on non-opt-in cases for uncredentialed. Potential race conditions here; maybe we shouldn't fill the map until navigation succeeds.
- CSP prefetch-src check (should this be done at create time?)
- CSP navigate-to check
- JS API
