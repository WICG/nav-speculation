<pre class="metadata">
Title: Speculation Rules
Shortname: speculation-rules
Group: WICG
Status: CG-DRAFT
Repository: WICG/nav-speculation
URL: https://wicg.github.io/nav-speculation/speculation-rules.html
Level: 1
Editor: Jeremy Roman, Google https://www.google.com/, jbroman@chromium.org
Editor: Domenic Denicola, Google https://www.google.com/, d@domenic.me
Abstract: Extensions to speculation rules to support navigational prerendering.
Markup Shorthands: css yes, markdown yes
Assume Explicit For: yes
Complain About: accidental-2119 yes, missing-example-ids yes
Indent: 2
Boilerplate: omit conformance
</pre>
<pre class="link-defaults">
</pre>
<pre class="anchors">
spec: PREFETCH; urlPrefix: https://wicg.github.io/nav-speculation/prefetch.html
  type: dfn
    for: prefetch record
      text: source; url: prefetch-record-source
    text: start a referrer-initiated navigational prefetch; url: start-referrer-initiated-navigational-prefetch
spec: PRERENDERING-REVAMPED; urlPrefix: https://wicg.github.io/nav-speculation/prerendering.html
  type: dfn
    text: start a referrer-initiated navigational prerender; url: start-referrer-initiated-navigational-prerender
spec: HTML; urlPrefix: https://whatpr.org/html/11426/speculative-loading.html#
  type: dfn
    text: collecting tags for matching speculative load candidates; url: collecting-tags-for-matching-speculative-load-candidates
    text: compute a speculative load referrer policy; url: compute-speculative-load-referrer-policy
    text: finding matching links; url: finding-matching-links
    text: inner consider speculative loads steps; url: inner-consider-speculative-loads-steps
    text: parse a speculation rule set string; url: speculation-rule-set
    text: parse a speculation rule; url: speculation-rule
    text: prefetch candidate; url: prefetch-candidate
    text: speculation rule set; url: speculation-rule-set
    text: speculation rule; url: speculation-rule
    text: speculative load candidate; url: speculative-load-candidate
    for: Document
      text: speculation rule sets; url: document-sr-sets
    for: prefetch candidate
      text: anonymization policy; url: sl-candidate-anonymization-policy
    for: speculation rule
      text: URLs; url: sr-urls
      text: predicate; url: sr-predicate
      text: eagerness; url: sr-eagerness
      text: referrer policy; url: sr-referrer-policy
      text: tags; url: sr-tags
      text: No-Vary-Search hint; url: sr-nvs-hint
    for: speculation rule set
      text: prefetch rules; url: sr-set-prefetch
    for: speculative load candidate
      text: URL; url: sl-candidate-url
      text: No-Vary-Search hint; url: sl-candidate-nvs-hint
      text: eagerness; url: sl-candidate-eagerness
      text: referrer policy; url: sl-candidate-referrer-policy
      text: tags; url: sl-candidate-tags
spec: HTML; urlPrefix: https://whatpr.org/html/11426/semantics.html#
  type: dfn
    text: get an element's target; url: get-an-element's-target
spec: HTML; urlPrefix: https://html.spec.whatwg.org/multipage/
  type: dfn
    text: valid navigable target name or keyword; url: document-sequences.html#valid-navigable-target-name-or-keyword
    for: HTMLHyperlinkElementUtils
      text: url; url: links.html#concept-hyperlink-url
</pre>
<style>
/* domintro from https://resources.whatwg.org/standard.css */
.domintro {
  position: relative;
  color: green;
  background: #DDFFDD;
  margin: 2.5em 0 2em 0;
  padding: 1.5em 1em 0.5em 2em;
}

.domintro dt, .domintro dt * {
  color: black;
  font-size: inherit;
}
.domintro dd {
  margin: 0.5em 0 1em 2em; padding: 0;
}
.domintro dd p {
  margin: 0.5em 0;
}
.domintro::before {
  content: 'For web developers (non-normative)';
  background: green;
  color: white;
  padding: 0.15em 0.25em;
  font-style: normal;
  position: absolute;
  top: -0.8em;
  left: -0.8em;
}

/* dl.props from https://resources.whatwg.org/standard.css */
dl.props { display: grid; grid-template-columns: max-content auto; row-gap: 0.25em; column-gap: 1em; }
dl.props > dt { grid-column-start: 1; margin: 0; }
dl.props > dd { grid-column-start: 2; margin: 0; }
p + dl.props { margin-top: -0.5em; }
</style>

<h2 id="moving-to-html">This specification is moving to HTML</h2>

The majority of this specification is being upstreamed to the HTML Standard: see <a href="https://github.com/whatwg/html/pull/11426">whatwg/html#11426</a> and <a href="https://github.com/whatwg/html/issues/11123">whatwg/html#11123</a>. The rendered specification text can currently be found at <a href="https://whatpr.org/html/11426/speculative-loading.html">this PR preview</a>.

What remains in this document are some additional patches to support prerendering, which the upstreamed version does not yet cover. Once prefetch is also upstreamed, what remains in this document will likely migrate to [[PRERENDERING-REVAMPED]].

<h2 id="speculation-rules-parsing">Parsing</h2>

Extend the [=speculation rule set=] [=struct=] with one additional [=struct/item=]:

* <dfn for="speculation rule set">prerender rules</dfn>, a [=list=] of [=speculation rules=], initially empty

Extend the [=speculation rule=] [=struct=] with one additional [=struct/item=]:

* <dfn for="speculation rule">target navigable name hint</dfn>, a [=string=] or null

<div algorithm="parse a speculation rule set string">
  Modify [=parse a speculation rule set string=] as follows:

  * Remove the <var ignore>typesToTreatAsPrefetch</var> construct, and instead parse |parsed|["`prerender`"] into the [=speculation rule set/prerender rules=] list, in an identical manner to what is done for |parsed|["`prefetch`"] and the [=speculation rule set/prefetch rules=].

  * Discard rules parsed from |parsed|["`prefetch`"] if the [=speculation rule/target navigable name hint=] is not null.

  <p class="note">Implementations will still be allowed to treat prerender candidates as prefetches, per the modifications in [[#speculation-rules-processing]].</p>
</div>

<div algorithm="parse a speculation rule">
  Modify [=parse a speculation rule=] by adding the following steps:

  1. Let |targetHint| be null.
  1. If |input|["`target_hint`"] [=map/exists=]:
    1. If |input|["`target_hint`"] is not a [=valid navigable target name or keyword=]:
      1. The user agent may [=report a warning to the console=] indicating that the supplied target hint was invalid.
      1. Return null.
    1. Set |targetHint| to |input|["`target_hint`"].

  and then updating the final step which returns a [=speculation rule=] to include setting the [=speculation rule/target navigable name hint=] to |targetHint|.
</div>

<h2 id="speculation-rules-processing">Processing model</h2>

A <dfn>prerender candidate</dfn> is a [=speculative load candidate=] with the following additional [=struct/item=]:

* <dfn for="prerender candidate">target navigable name hint</dfn>, a [=valid navigable target name or keyword=] or null

<div algorithm="inner consider speculative loads steps">
  Update the [=inner consider speculative loads steps=] algorithm by appending the following steps near the beginning, after assembling |prefetchCandidates|:

  1. Let |prerenderCandidates| be an empty [=list=].
  1. [=list/For each=] |ruleSet| of |document|'s [=Document/speculation rule sets=]:
    1. [=list/For each=] |rule| of |ruleSet|'s [=speculation rule set/prerender rules=]:
        1. [=list/For each=] |url| of |rule|'s [=speculation rule/URLs=]:
          1. Let |referrerPolicy| be the result of [=computing a speculative load referrer policy=] given |rule| and null.
          1. [=list/Append=] a new [=prerender candidate=] with

            <dl class="props">
              : [=speculative load candidate/URL=]
              :: |url|

              : [=speculative load candidate/No-Vary-Search hint=]
              :: |rule|'s [=speculation rule/No-Vary-Search hint=]

              : [=speculative load candidate/eagerness=]
              :: |rule|'s [=speculation rule/eagerness=]

              : [=speculative load candidate/referrer policy=]
              :: |referrerPolicy|

              : [=speculative load candidate/tags=]
              :: |rule|'s [=speculation rule/tags=]

              : [=prerender candidate/target navigable name hint=]
              :: |rule|'s [=speculation rule/target navigable name hint=]
            </dl>

            to |prerenderCandidates|.
        1. If |rule|'s [=speculation rule/predicate=] is not null, then:
          1. Let |links| be the result of [=finding matching links=] given |document| and |rule|'s [=speculation rule/predicate=].
          1. [=list/For each=] |link| of |links|:
            1. Let |target| be |rule|'s [=speculation rule/target navigable name hint=].
            1. If |target| is null, set it to the result of [=getting an element's target=] given |link|.
            1. Let |referrerPolicy| be the result of [=computing a speculative load referrer policy=] given |rule| and |link|.
            1. [=list/Append=] a [=prerender candidate=] with

              <dl class="props">
                : [=speculative load candidate/URL=]
                :: |link|'s [=HTMLHyperlinkElementUtils/url=]

                : [=speculative load candidate/No-Vary-Search hint=]
                :: |rule|'s [=speculation rule/No-Vary-Search hint=]

                : [=speculative load candidate/eagerness=]
                :: |rule|'s [=speculation rule/eagerness=]

                : [=speculative load candidate/referrer policy=]
                :: |referrerPolicy|

                : [=speculative load candidate/tags=]
                :: |rule|'s [=speculation rule/tags=]

                : [=prerender candidate/target navigable name hint=]
                :: |target|
              </dl>

              to |prerenderCandidates|.
  1. Let |speculativeLoadCandidates| be the union of |prefetchCandidates| and |prerenderCandidates|.

  Update subsequent steps for canceling not-still-being-speculated [=prefetch records=] to operate on |speculativeLoadCandidates| instead of |prefetchCandidates|.

  Replace the step which performs the actual prefetching by looping over |prefetchCandidates| with the following:

  1. [=list/For each=] |candidate| of |speculativeLoadCandidates|:

    1. The user agent may run the following steps:

      1. Let |tagCandidates| be |speculativeLoadCandidates|.

      1. If |candidate| is a [=prerender candidate=], then set |tagCandidates| to |prerenderCandidates|.

      1. Let |tagsToSend| be the result of [=collecting tags for matching speculative load candidates=] given |candidate| and |tagCandidates|.

      1. Let |prefetchRecord| be a new [=prefetch record=] with

        <dl class="props">
          : [=prefetch record/source=]
          :: "`speculation rules`"

          : [=prefetch record/URL=]
          :: |candidate|'s [=speculative load candidate/URL=]

          : [=prefetch record/No-Vary-Search hint=]
          :: |candidate|'s [=speculative load candidate/No-Vary-Search hint=]

          : [=prefetch record/referrer policy=]
          :: |candidate|'s [=speculative load candidate/referrer policy=]

          : [=prefetch record/tags=]
          :: |tagsToSend|
        </dl>

      1. If |candidate| is a [=prefetch candidate=], then set |prefetchRecord|'s [=prefetch record/anonymization policy=] to |candidate|'s [=prefetch candidate/anonymization policy=].

      1. If |candidate| is a [=prerender candidate=], then the user agent may run the following steps:

        1. Set |prefetchRecord|'s [=prefetch record/prerendering traversable=] to "`to be created`"

        1. Set |prefetchRecord|'s [=prefetch record/prerendering target navigable name hint=] to |candidate|'s [=prerender candidate/target navigable name hint=].

        1. [=Start a referrer-initiated navigational prerender=] given |document| and |prefetchRecord|.

      1. If the user agent did not run the previous step, then [=start a referrer-initiated navigational prefetch=] given |document| and |prefetchRecord|.
</div>
